% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/surv_rl_lasso.R
\name{surv_rl_lasso}
\alias{surv_rl_lasso}
\title{R-learner of lasso}
\usage{
surv_rl_lasso(
  X,
  Y,
  W,
  D,
  times = NULL,
  k.folds = 10,
  foldid = NULL,
  W.hat = NULL,
  Y.hat = NULL,
  C.hat = NULL,
  lambda.choice = "lambda.min",
  penalty.factor = NULL,
  args.lasso.nuisance = list(),
  args.grf.nuisance = list(),
  args.lasso.tau = list(),
  cen.fit = "Kaplan-Meier"
)
}
\arguments{
\item{X}{The baseline covariates}

\item{Y}{The follow-up time}

\item{W}{The treatment variable (0 or 1)}

\item{D}{The event indicator}

\item{times}{The prediction time of interest}

\item{k.folds}{Number of folds for cross validation}

\item{foldid}{User-supplied foldid. Must have length equal to length(W). If provided, it overrides the k.folds option.}

\item{W.hat}{Propensity score}

\item{Y.hat}{Conditional mean outcome E(Y|X)}

\item{C.hat}{Censoring weights}

\item{lambda.choice}{How to cross-validate; choose from "lambda.min" or "lambda.1se"}

\item{penalty.factor}{User-supplied penalty factor, must be of length the same as number of features in X}

\item{args.lasso.nuisance}{Input arguments for a lasso model that estimates nuisance parameters}

\item{args.grf.nuisance}{Input arguments for a grf model that estimates nuisance parameters}

\item{args.lasso.tau}{Input arguments for a lasso model that estimates CATE}

\item{cen.fit}{The choice of model fitting for censoring}
}
\value{
a surv_rl_lasso object
}
\description{
R-learner, implemented via glmnet (lasso)
}
\examples{
\donttest{
n = 1000; p = 25
times = 0.2
Y.max <- 2
X <- matrix(rnorm(n * p), n, p)
W <- rbinom(n, 1, 0.5)
numeratorT <- -log(runif(n))
T <- (numeratorT / exp(1 * X[,1] + (-0.5 - 1 * X[,2]) * W))^2
failure.time <- pmin(T, Y.max)
numeratorC <- -log(runif(n))
censor.time <- (numeratorC/(4^2))^(1/2)
Y <- pmin(failure.time, censor.time)
D <- as.integer(failure.time <= censor.time)
n.test <- 500
X.test <- matrix(rnorm(n.test * p), n.test, p)

surv.rl.lasso.fit = surv_rl_lasso(X, Y, W, D, times, W.hat = 0.5)
cate = predict(surv.rl.lasso.fit)
cate.test = predict(surv.rl.lasso.fit, X.test)
}
}
